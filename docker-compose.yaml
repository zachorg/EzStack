networks:
  internal:
    external: false

volumes:
  redisdata:

services:
  ezstack-site:
    build:
      context: ./apps/ezstack-site
      dockerfile: Dockerfile
      args:
        NEXT_PUBLIC_FIREBASE_API_KEY: ${NEXT_PUBLIC_FIREBASE_API_KEY:?error}
        NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN: ${NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN:?error}
        NEXT_PUBLIC_FIREBASE_PROJECT_ID: ${NEXT_PUBLIC_FIREBASE_PROJECT_ID:?error}
        NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET: ${NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET:?error}
        NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID: ${NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID:?error}
        NEXT_PUBLIC_FIREBASE_APP_ID: ${NEXT_PUBLIC_FIREBASE_APP_ID:?error}
        NEXT_PUBLIC_API_BASE_URL: ${NEXT_PUBLIC_API_BASE_URL:-https://api.ezstack.app}
        NEXT_PUBLIC_SITE_URL: ${NEXT_PUBLIC_SITE_URL:-https://ezstack.app}
    image: ezstack-site:latest
    container_name: ezstack-site
    restart: unless-stopped
    ports:
      - "3000:3000"  # Exposed for Cloudflare Tunnel
    volumes:
      - ./secrets:/app/secrets:ro
    environment:
      NODE_ENV: development
    depends_on:
      ezstack:
        condition: service_started
    networks:
      - internal
  
  ezstack:
    build:
      context: ./apps/ezstack
      dockerfile: Dockerfile
    image: ezstack:latest
    container_name: ezstack
    restart: unless-stopped
    ports:
      - "8080:8080"  # Exposed for Cloudflare Tunnel
    volumes:
      - ./scripts:/app/scripts:ro
      - ./secrets:/app/secrets:ro
    env_file:
      - .env
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - internal

  ezauth:
    build:
      context: ./apps/ezauth
      dockerfile: Dockerfile
    image: ezauth:latest
    container_name: ezauth
    restart: unless-stopped
    ports:
      - "8081:8081"  # Exposed for Cloudflare Tunnel
    volumes:
      - ./scripts:/app/scripts:ro
      - ./secrets:/app/secrets:ro
    env_file:
      - .env
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - internal

  redis:
    image: redis:7-alpine
    container_name: redis
    command: ["redis-server", "--appendonly", "yes"]
    restart: unless-stopped
    expose:
      - "6379"
    volumes:
      - redisdata:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 20
    networks:
      - internal
